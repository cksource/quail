#!/usr/bin/env node

var fs = require('fs');
var program = require('../node_modules/commander/');
var shell = require('../node_modules/shelljs/');
var path = require('path');

/**
 * Validates the existence of a directory.
 */
function validateDirectory (dir) {
  var stat;
  // See if it's relative to the project. Make an assumption that paths
  // are relative to the ROOT of the project, hence the '..'.
  try {
    stat = fs.statSync(path.join(__dirname, '..', dir));
    if (stat.isDirectory()) {
      return path.join(__dirname, '..', dir);
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // Otherwise just use the given directory path.
  try {
    stat = fs.statSync(dir);
    if (stat.isDirectory()) {
      return dir;
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // If we got this far, then the dir is not an existing directory.
  console.error('`' + dir + '` is not an existing absolute or relative directory path.');
  process.exit(1);
}

/**
 * Validates the existence of a file.
 */
function validateFilePath (filepath) {
  var stat;
  // See if it's relative to the project. Make an assumption that paths
  // are relative to the ROOT of the project, hence the '..'.
  try {
    stat = fs.statSync(path.join(__dirname, '..', filepath));
    if (stat.isFile()) {
      return path.join(__dirname, '..', filepath);
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // Otherwise just use the given file path.
  try {
    stat = fs.statSync(filepath);
    if (stat.isFile()) {
      return filepath;
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // If we got this far, then the filepath is not an existing directory.
  console.error('`' + filepath + '` is not an existing absolute or relative file path.');
  process.exit(1);
}

// Change to the dist dir.
shell.cd(__dirname);
shell.cd('..');
var pwd = shell.pwd();

program
  .version('2.2.18')
  .option('-u, --url [url]', 'A [url] to test', null)
  .option('-R, --runner [runnerScript]', 'A [runnerScript] that will run the evaluation. Currently there exists \'default\' and \'wcag2\'.', 'default')
  .option('-o, --output [outputDir]', 'An [outputDir] to write the analysis results to', validateDirectory)
  .option('-c, --config [configFile]', 'A configuration file for the PhantomJS instance', validateFilePath)
  .parse(process.argv);

var runnerScript;
var phantomjsExec = path.join(__dirname, '..', 'node_modules/.bin/phantomjs');

// Determine the runner script to use.
var runners = {
  'default': path.join(__dirname, '..', 'src/js/scripts/phantom_evaluator.js'),
  'wcag2': path.join(__dirname, '..', 'src/js/scripts/wcag2_evaluator.js')
};

if (program.runner in runners) {
  runnerScript = runners[program.runner];
}
else {
  runnerScript = runners['default'];
}

// Determine the configuration file path.
var configFilePath = path.join(__dirname, '..', 'config/config.json');
if (program.config) {
  configFilePath = program.config;
}

// Arguments passed to PhantomJS
// args[0]: The test runner script.
// args[1]: The URL to evaluate.
// args[2]: The current working directory.
// args[3]: The configuration for the phantomjs instance.
// args[4]: The file to write analysis to.
var command = [phantomjsExec, runnerScript, program.url, pwd, configFilePath, program.output].join(' ');
console.log(command);

shell.exec(command, {
  async:true
}, function (code) {
  shell.echo('code: ' + code);
});

